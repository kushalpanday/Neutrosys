{"ast":null,"code":"import * as e from \"react\";\nimport { useFormContext as r, get as n } from \"react-hook-form\";\nvar s = function s(_s) {\n  var t = _s.as,\n    a = _s.errors,\n    m = _s.name,\n    o = _s.message,\n    i = _s.render,\n    l = function (e, r) {\n      if (null == e) return {};\n      var n,\n        s,\n        t = {},\n        a = Object.keys(e);\n      for (s = 0; s < a.length; s++) {\n        r.indexOf(n = a[s]) >= 0 || (t[n] = e[n]);\n      }\n      return t;\n    }(_s, [\"as\", \"errors\", \"name\", \"message\", \"render\"]),\n    f = r(),\n    c = n(a || f.formState.errors, m);\n  if (!c) return null;\n  var g = c.message,\n    u = c.types,\n    d = Object.assign({}, l, {\n      children: g || o\n    });\n  return e.isValidElement(t) ? e.cloneElement(t, d) : i ? i({\n    message: g || o,\n    messages: u\n  }) : e.createElement(t || e.Fragment, d);\n};\nexport { s as ErrorMessage };","map":{"version":3,"mappings":";;AAIMA,QAAe;EAAA,IAQnBC;IACAC;IACAC;IACAC;IACAC;IACGC;MAAAA;MAAAA;QAAAA;QAAAA;QAAAA;MAAAA;QAAAA;MAAAA;MAAAA;IAAAA;IAEGC,IAAUC;IACVC,IAAQC,EAAIR,KAAUK,EAAQI,UAAUT,QAAQC;EAEtD,KAAKM,GACH;EAGF,IAAiBG,IAA+BH,EAAxCL;IAA8BS,IAAUJ,EAAVI;IAChCC,IAAQC,OAAOC,OAAO,IAAIV,GAAM;MACpCW,UAAUL,KAAuBR;IAAAA;EAGnC,OAAOc,EAAMC,eAAelB,KACxBiB,EAAME,aAAanB,GAAIa,KACvBT,IACCA,EAAO;IACND,SAASQ,KAAuBR;IAChCiB,UAAUR;EAAAA,KAEZK,EAAMI,cAAerB,KAAiBiB,EAAMK,UAAUT;AAAAA;AAAAA","names":["ErrorMessage","as","errors","name","message","render","rest","methods","useFormContext","error","get","formState","messageFromRegister","types","props","Object","assign","children","React","isValidElement","cloneElement","messages","createElement","Fragment"],"sources":["S:\\Neutrosys-services\\node_modules\\@hookform\\error-message\\src\\ErrorMessage.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useFormContext, get, FieldErrors } from 'react-hook-form';\nimport { Props } from './types';\n\nconst ErrorMessage = <\n  TFieldErrors extends FieldErrors,\n  TAs extends\n    | undefined\n    | React.ReactElement\n    | React.ComponentType<any>\n    | keyof JSX.IntrinsicElements = undefined\n>({\n  as,\n  errors,\n  name,\n  message,\n  render,\n  ...rest\n}: Props<TFieldErrors, TAs>) => {\n  const methods = useFormContext();\n  const error = get(errors || methods.formState.errors, name);\n\n  if (!error) {\n    return null;\n  }\n\n  const { message: messageFromRegister, types } = error;\n  const props = Object.assign({}, rest, {\n    children: messageFromRegister || message,\n  });\n\n  return React.isValidElement(as)\n    ? React.cloneElement(as, props)\n    : render\n    ? (render({\n        message: messageFromRegister || message,\n        messages: types,\n      }) as React.ReactElement)\n    : React.createElement((as as string) || React.Fragment, props);\n};\n\nexport { ErrorMessage };\n"]},"metadata":{},"sourceType":"module"}